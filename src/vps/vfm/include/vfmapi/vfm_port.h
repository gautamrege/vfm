/*
 * Copyright (c) 2008  VirtualPlane Systems, Inc.
 */
#ifndef INCLUDED_vfm_port
#define INCLUDED_vfm_port

#include "vfm_common.h"
#include "vfm_error.h"
#include "vfm_state.h"
#include <ifaddrs.h>

/**
 * @file
 * @brief Structures of physical port properties on a BridgeX device.
 */

/**
 * @brief A port id. This is a unique identifier for the port. This id is
 * unique within a VFM context and auto-generated by the system.
 */
typedef uint32_t vfm_port_id_t;

/**
 * @brief A port physical index. This is a identifier for the port derived from
 * the physical configuration of the bridge device.
 */
typedef char *vfm_port_index_t;


/**
 * @brief Traffic stats on a port. This identifier is updated from periodic
 * updates from a bridge device.
 */
typedef uint32_t vfm_traffic_stat_t;

/**
 * @brief Port type values
 */
typedef enum PortTypeEnum
{
    /**
     * @brief Port is an Internal port
     */
    VFM_PORT_INTERNAL	= 1,

    /**
     * @brief Port is an External port
     */
    VFM_PORT_EXTERNAL	= 2
}
vfm_port_type_t;

/**
 * @brief A structure for the Ethernet properties of a port
 */
typedef struct
{
    /**
     * @brief MAC address assigned to a port
     *
     * @note The MAC address of the port is queried from the BridgeX device
     * physical configuration.
     */
    en_mac_addr_t mac;
}
vfm_port_en_attr_t;


/**
 * @brief A structure for the Fiber Channel properties of a port
 */
typedef struct
{
    /**
     * @brief World Wide Node Name of the port
     * @note The WWNN of the port is queried from the BridgeX device physical  
     * configuration.
     */
    uint64_t wwnn;

    /**
     * @brief World Wide Port Name of the port
     * @note The WWPN of the port is queried from the BridgeX device physical  
     * configuration.
     */
    uint64_t wwpn;

    /**
     * @brief 24 bit FC ID of the port.
     * @note The FCID of the port is generated when the Gateway logs into the
     * FC fabric.
     */
    fc_id_t fcid;
}
vfm_port_fc_attr_t;

/**
 * @brief A structure for the InfiniBand properties of an object.
 */
typedef struct
{
    /**
     * @brief 64 bit IB GUID of the port
     * @note The GUID of the port is generated when the internal port logs
     * into the IB fabric.  
     */
    ib_guid_t ib_guid;

    /**
     * @brief Lid of InfiniBand port.
     */
    uint16_t lid;
    
    /**
     * @brief QP Number of the port
     */
    uint32_t qpn;

    /**
     * @brief Service Level value of the port
     */
    uint8_t  sl;
}
vfm_port_ib_attr_t;


/**
 * @brief A structure for the properties of an internal/external port. 
 */
typedef struct
{
    /**
     * @brief Unique id for ports
     *
     * @note This is a read-only property i.e. a user cannot edit it using
     * the the bridge_device or the gateway API. This identifier is created by
     * the system when the bridge device object is created.  
     */
    vfm_port_id_t _port_id;

    /**
     * @brief A physical index of the port based on the configuration of
     * the BridgeX device.
     *
     * @note This is a read-only property i.e. a user cannot edit it using
     * the bridge_device or the gateway API. The index is queried from the
     * Bridge device configuration when the bridge device object is created. 
     */
    vfm_port_index_t *_physical_index;

    /**
     * @brief Identifies if the port is an Internal or an External port
     * 
     * @note This is a read-only property i.e. a user cannot edit it using
     * the bridge_device or the gateway API.
     */
    vfm_port_type_t _type;

    /**
     * @brief The protocol of the port
     *
     * @note This is a read-only property i.e. a user cannot edit it using
     * the bridge_device or the gateway API.
     * @note In a BridgeX device the protocol of internal and external
     * ports of a gateway module should be same. Due to this architectural
     * limitation, it is not allowed to modify the protocol of a single
     * port independently.
     */
    vfm_protocol_t _protocol;

    /**
     * @brief State of the port
     * @note By default the state of the port is VFM_PORT_STATE_DOWN
     */
    vfm_port_state_t state;

    /**
     * @brief The protocol specific properties of the port
     */
    union
    {
	vfm_port_en_attr_t en_attr;
	vfm_port_fc_attr_t fc_attr;
	vfm_port_ib_attr_t ib_attr;
    };

    /**
     * @brief Max transmission unit of the port
     * @note By default the MTU is set to TODO 
     */
    uint32_t mtu;

    /**
     * @brief Supported link speed of the port
     * @note This is a read-only property i.e. a user cannot edit it using
     * the bridge_device or the gateway API.
     */
    uint32_t supported_speed;

    /**
     * @brief Actual link Speed of the port
     */
    uint32_t actual_speed;

    /**
     * @brief Incomming traffic stats on the port
     * @note This is a read-only property i.e. a user cannot edit it using
     * the bridge_device or the gateway API.
     */
    vfm_traffic_stat_t _rx_stat;

    /**
     * @brief Incomming traffic stats on the port
     * @note This is a read-only property i.e. a user cannot edit it using
     * the bridge_device or the gateway API.
     */
    vfm_traffic_stat_t _tx_stat;
}
vfm_port_attr_t;


/**
 * @brief A bitmask structure for the properties of a port.  A
 * bit set to 1 means that the corresponding data object has been
 * selected.
 */
typedef struct
{
    uint8_t port_id:1;
    uint8_t name:1;
    uint8_t type:1;
    uint8_t protocol:1;
    uint8_t state:1;
    uint8_t protocol_attr:1;
    uint8_t mtu:1;
    uint8_t supported_speed:1;
    uint8_t actual_speed:1;
    uint8_t rx_stat:1;
    uint8_t tx_stat:1;
}
vfm_port_attr_bitmask_t;



#endif /* INCLUDED_vfm_port */
